generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrganizationRole {
  owner
  admin
  member
  professional
  patient
  attendant
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  description String?
  cnpj        String?  @unique
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String?
  phone       String?
  email       String?
  website     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  userOrganizations UserOrganization[]
  appointments      Appointment[]
  availabilities    Availability[]
  attendances       Attendance[]

  @@map("organizations")
}

model Users {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  password        String
  cpf             String    @unique
  image           String?
  phone           String?
  birthDate       DateTime?
  address         String?
  numberOfAddress String?
  complement      String?
  city            String?
  state           String?
  zipCode         String?
  country         String?
  cid             String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relacionamentos
  userOrganizations          UserOrganization[]
  appointmentsAsPatient      Appointment[]      @relation("PatientAppointments")
  appointmentsAsProfessional Appointment[]      @relation("ProfessionalAppointments")
  availabilities             Availability[]
  notifications              Notification[]
  attendancesAsPatient       Attendance[]       @relation("AttendancePatient")
  attendancesAsProfessional  Attendance[]       @relation("AttendanceProfessional")
  Appointment                Appointment[]
  Attendance                 Attendance[]

  @@map("users")
}

model UserOrganization {
  id             String           @id @default(cuid())
  userId         String
  organizationId String
  role           OrganizationRole @default(member)
  isActive       Boolean          @default(true)
  joinedAt       DateTime         @default(now())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relacionamentos
  user         Users        @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
  @@map("user_organizations")
}

enum AppointmentStatus {
  scheduled
  confirmed
  cancelled
  completed
  no_show
}

model Appointment {
  id             String            @id @default(cuid())
  patientId      String
  professionalId String
  organizationId String
  startTime      DateTime
  endTime        DateTime
  status         AppointmentStatus @default(scheduled)
  notes          String?
  googleEventId  String?           @unique
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // Relacionamentos
  patient      Users          @relation("PatientAppointments", fields: [patientId], references: [id])
  professional Users          @relation("ProfessionalAppointments", fields: [professionalId], references: [id])
  organization Organization   @relation(fields: [organizationId], references: [id])
  notification Notification[]
  Users        Users?         @relation(fields: [usersId], references: [id])
  usersId      String?

  @@index([patientId])
  @@index([professionalId])
  @@index([organizationId])
  @@index([startTime])
  @@map("appointments")
}

model Availability {
  id             String   @id @default(cuid())
  professionalId String
  organizationId String
  dayOfWeek      Int // 0-6 (domingo-s√°bado)
  startTime      String // formato HH:mm
  endTime        String // formato HH:mm
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relacionamentos
  professional Users        @relation(fields: [professionalId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  @@unique([professionalId, organizationId, dayOfWeek, startTime])
  @@index([professionalId])
  @@index([organizationId])
  @@map("availabilities")
}

model Notification {
  id            String    @id @default(cuid())
  userId        String
  appointmentId String?
  type          String // reminder, cancellation, confirmation
  title         String
  message       String
  sentAt        DateTime?
  readAt        DateTime?
  createdAt     DateTime  @default(now())

  // Relacionamentos
  user        Users        @relation(fields: [userId], references: [id])
  appointment Appointment? @relation(fields: [appointmentId], references: [id])

  @@index([userId])
  @@index([appointmentId])
  @@map("notifications")
}

model Attendance {
  id             String   @id @default(cuid())
  patientId      String
  professionalId String
  organizationId String
  description    String
  date           DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relacionamentos
  patient      Users        @relation("AttendancePatient", fields: [patientId], references: [id])
  professional Users        @relation("AttendanceProfessional", fields: [professionalId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])
  Users        Users?       @relation(fields: [usersId], references: [id])
  usersId      String?

  @@index([patientId])
  @@index([professionalId])
  @@index([organizationId])
  @@map("attendances")
}
